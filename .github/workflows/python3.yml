name: Python3

on:
    push:
        branches: [ "dev", "stage", "master", "main" ]
    pull_request: # Trigger on pull requests to any branch

jobs:
    build:
        runs-on: ubuntu-latest

        steps:
            -   name: Checkout code
                uses: actions/checkout@v4

            -   name: Set up Node.js
                uses: actions/setup-node@v4
                with:
                    node-version: '18'
                    cache: 'npm'

            -   name: Install poetry
                run: pipx install poetry
                
            -   name: Set up Python
                uses: actions/setup-python@v5
                with:
                    python-version: '3.12'
                    cache: poetry
                    cache-dependency-path: poetry.lock

            -   name: Cache stuff
                # The cache is only refreshed when the lock file changes,
                # leading to better cache reuse.
                uses: actions/cache@v4
                id: cache-primes
                with:
                    path: |
                        .run/reports
                    key: custom-cache-${{ runner.os }}-${{ hashFiles('package-lock.json', 'poetry.lock') }}
                    restore-keys: |
                        custom-cache-${{ runner.os }}-
                    save-always: true

            -   name: Install dependencies
                run: poetry install

            -   name: Run post install actions
                run: poetry run post-install

            -   name: Run linters
                run: poetry run lint
                continue-on-error: false

            -   name: Run tests
                run: poetry run test-ci
                env:
                    HEADLESS: "True"
                if: success()

            -   name: Run reports
                run: poetry run report
                if: success()

            # Upload Reports as Artifacts
            -   name: Upload Reports
                if: success()
                uses: actions/upload-artifact@v4
                with:
                    name: reports
                    path: .run/reports

            # Optional: Run SonarQube analysis if you have it configured
            # - name: Run SonarQube Scanner
            #   env:
            #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
            #   run: |
            #     poetry run sonar-scanner \
            #     -Dsonar.projectKey=my_python_project \
            #     -Dsonar.sources=. \
            #     -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
            #     -Dsonar.login=${{ secrets.SONAR_TOKEN }}
