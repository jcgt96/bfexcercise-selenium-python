name: Python3

on:
    push:
        branches: [ "dev", "stage", "master", "main" ]
    pull_request: # Trigger on pull requests to any branch

jobs:
    build:
        runs-on: ubuntu-latest
        steps:
            -   name: Install dependencies for Chrome
                run: |
                    sudo apt-get update
                    sudo apt-get install -y libappindicator3-1 fonts-liberation xdg-utils \
                    libxrandr2 libxss1 libxcursor1 libxcomposite1 libasound2 libxi6 libxtst6 \
                    libnss3 libx11-xcb1

            -   name: Set up ChromeDriver
                uses: nanasess/setup-chromedriver@v2.2.2

            -   name: Install Xvfb and Chrome
                run: |
                    sudo apt-get update
                    sudo apt-get install -y xvfb
                    sudo apt-get install -y google-chrome-stable
                    Xvfb :99 -ac &  # Start Xvfb
                    export DISPLAY=:99  # Set display for headless Chrome

            -   name: Checkout code
                uses: actions/checkout@v4

            -   name: Set up Node.js
                uses: actions/setup-node@v4
                with:
                    node-version: '18'
                    cache: 'npm'

            -   name: Install poetry
                run: pipx install poetry

            -   name: Set up Python
                uses: actions/setup-python@v5
                with:
                    python-version: '3.12'
                    cache: poetry
                    cache-dependency-path: poetry.lock

            -   name: Cache stuff
                # The cache is only refreshed when the lock file changes,
                # leading to better cache reuse.
                uses: actions/cache@v4
                id: cache-primes
                with:
                    path: |
                        .run/reports
                    key: custom-cache-${{ runner.os }}-${{ hashFiles('package-lock.json', 'poetry.lock') }}
                    restore-keys: |
                        custom-cache-${{ runner.os }}-
                    save-always: true

            -   name: Install dependencies
                run: poetry install

            -   name: Run post install actions
                run: poetry run post-install

            -   name: Run linters
                run: poetry run lint
                continue-on-error: false

            # Run tests and capture result
            -   name: Run tests
                id: run_tests
                run: |
                    export DISPLAY=:99
                    poetry run test || echo "Tests failed" > test_fail_flag
                env:
                    HEADLESS: "False"

            -   name: Check test result
                id: check_tests
                run: |
                    if [ -f test_fail_flag ]; then
                      echo "Tests failed"
                      echo "test-result=failed" >> $GITHUB_ENV
                    else
                      echo "Tests passed"
                      echo "test-result=passed" >> $GITHUB_ENV
                    fi

            -   name: Run reports
                run: poetry run report
                if: always() # Always run reports even if tests fail

            # Upload Reports as Artifacts
            -   name: Upload Reports
                uses: actions/upload-artifact@v4
                with:
                    name: reports
                    path: .run/reports
                if: always() # Always upload reports

            # Optional: Run SonarQube analysis if you have it configured
            # - name: Run SonarQube Scanner
            #   env:
            #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
            #   run: |
            #     poetry run sonar-scanner \
            #     -Dsonar.projectKey=my_python_project \
            #     -Dsonar.sources=. \
            #     -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
            #     -Dsonar.login=${{ secrets.SONAR_TOKEN }}

            # Final step to fail build if tests failed
            -   name: Fail the build if tests failed
                if: env.test-result == 'failed'
                run: exit 1
